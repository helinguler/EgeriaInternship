//
//  GenericDetailView.swift
//  EgeriaInternshipApp
//
//  Created by Helin G√ºler on 6.05.2025.
//

/// Her sayfa i√ßin ayrƒ± view file olu≈üturmak yerine se√ßilen MenuItem'a g√∂re ilgili i√ßerik ve i≈ülemleri sunar.
/// Desteklenen ID‚Äôler:
/// - "gunluk-plan" ‚Üí √ºretim plan listesi
/// - "aktif-sevkiyat" ‚Üí sevkiyat listesi
/// - "teslim-siparis" ‚Üí barkod tarayƒ±cƒ± destekli sipari≈ü teslim listesi
/// - "urun-stok" ‚Üí stok durumu listesi
/// Diƒüerleri i√ßin varsayƒ±lan genel i≈ülem butonu g√∂sterilir
import SwiftUI

struct GenericDetailView: View {
    let menuItem: MenuItem

    @State private var showConfirmation = false
    @State private var alertTitle: String = ""
    @State private var alertMessage: String = ""
    @State private var primaryButton: Alert.Button = .default(Text("Tamam"))
    @State private var secondaryButton: Alert.Button = .cancel()
    @State private var showScanner = false
    @State private var scannedCode: String = ""
    @State private var scannedBarcodes: [String] = []



    var body: some View {
        VStack(spacing: 20) {

            if UserManager.shared.hasPermission(for: menuItem.id) {
                actionButtons(for: menuItem.id)
            } else {
                Text("Bu sayfaya eri≈üim yetkiniz yok.")
                    .foregroundStyle(.gray)
            }
        }
        .padding()
        .navigationTitle(menuItem.title)
        .alert(isPresented: $showConfirmation) {
            Alert(
                title: Text(alertTitle),
                message: Text(alertMessage),
                primaryButton: primaryButton,
                secondaryButton: secondaryButton
            )
        }
        .onAppear {
            DispatchQueue.global(qos: .userInitiated).async {
                    loadBarcodesFromDefaults()
                }
                }
        .toolbar {
                    ToolbarItem(placement: .navigationBarTrailing) {
                        Button(action: {
                            showScanner = true
                        }) {
                            Image(systemName: "barcode.viewfinder")
                        }
                    }
                }
                .sheet(isPresented: $showScanner) {
                    BarcodeScannerView { code in
                        scannedCode = code
                        showScanner = false
                        print("üì¶ Barkod:", code)
                        
                        if menuItem.id == "teslim-siparis" {
                                if !scannedBarcodes.contains(code) {
                                    scannedBarcodes.append(code)
                                    saveBarcodesToDefaults()
                                }
                            }
                    }
        }
    }

    @ViewBuilder
    func actionButtons(for id: String) -> some View {
        switch id {
        // MARK: G√ºnl√ºk plan g√∂r√ºn√ºm√º
        case "gunluk-plan":
            VStack(spacing: 12) {
                Text("üìã Bug√ºn√ºn Planlarƒ±")
                    .font(.headline)

                VStack(alignment: .leading) {
                    HStack {
                        Text("Saat").bold().frame(width: 80, alignment: .leading)
                        Text("G√∂rev").bold().frame(maxWidth: .infinity, alignment: .leading)
                    }
                    Divider()
                    HStack {
                        Text("08:00").frame(width: 80, alignment: .leading)
                        Text("√úretim Ba≈ülat").frame(maxWidth: .infinity, alignment: .leading)
                    }
                    HStack {
                        Text("10:30").frame(width: 80, alignment: .leading)
                        Text("Kalite Kontrol").frame(maxWidth: .infinity, alignment: .leading)
                    }
                    HStack {
                        Text("13:00").frame(width: 80, alignment: .leading)
                        Text("Paketleme").frame(maxWidth: .infinity, alignment: .leading)
                    }
                    HStack {
                        Text("15:00").frame(width: 80, alignment: .leading)
                        Text("Sevkiyata G√∂nderim").frame(maxWidth: .infinity, alignment: .leading)
                    }
                }
                .padding()
                .background(Color.gray.opacity(0.1))
                .cornerRadius(10)

                Spacer()

                Button("Yeni Plan Ekle") {
                    configureAlert(
                        title: "Plan Eklensin mi?",
                        message: "ƒ∞≈ülemine ba≈ülamak istediƒüinize emin misiniz?",
                        primary: .default(Text("Evet")) {
                            print("‚úÖ Plan ba≈üladƒ±")
                        },
                        secondary: .cancel(Text("Hayƒ±r"))
                        )
                }
                .padding()
                .background(Color.blue)
                .foregroundColor(.white)
                .cornerRadius(10)
            }
            .frame(maxWidth: .infinity, maxHeight: .infinity)
            .padding()
         
        // MARK: Aktif sevkiyat g√∂r√ºn√ºm√º
        case "aktif-sevkiyat":
            VStack(spacing: 12) {

                List {
                    Text("Sevkiyat - Ankara")
                    Text("Sevkiyat - ƒ∞zmir")
                    Text("Sevkiyat - Bursa")
                }
                .listStyle(.inset)
                .frame(height: 300)
                
                Spacer()
                
                Button("T√ºm Sevkiyatlarƒ± Ba≈ülat") {
                    configureAlert(
                        title: "Sevkiyat Ba≈ülatƒ±lsƒ±n mƒ±?",
                        message: "T√ºm aktif sevkiyatlar ba≈ülatƒ±lacak. Emin misiniz?",
                        primary: .default(Text("Ba≈ülat")) {
                            print("üöö Sevkiyatlar ba≈ülatƒ±ldƒ±")
                        },
                        secondary: .cancel(Text("ƒ∞ptal"))
                    )
                }
                .padding()
                .background(Color.green.opacity(0.8))
                .foregroundColor(.white)
                .cornerRadius(10)
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .padding()

        // MARK: Teslim edilen sipari≈ü sayfasƒ± g√∂r√ºn√ºm√º
        case "teslim-siparis":
            VStack(spacing: 12) {
                List {
                    if scannedBarcodes.isEmpty {
                        Text("üì≠ Hen√ºz barkod okutulmadƒ±.")
                    } else {
                        ForEach(scannedBarcodes, id: \.self) { code in
                            Text("üì¶ Barkod: \(code)")
                        }
                    }
                }
                .frame(height: 300)
                .listStyle(.inset)

                Button("Sipari≈üleri G√ºncelle") {
                    configureAlert(
                        title: "Sipari≈ü G√ºncellensin mi?",
                        message: "Sipari≈ü listesi g√ºncellenecek. Devam etmek istiyor musunuz?",
                        primary: .default(Text("G√ºncelle")) {
                            print("üîÑ G√ºncellenen Barkodlar:", scannedCode)
                        },
                        secondary: .cancel(Text("ƒ∞ptal"))
                    )
                }
                .padding()
                .background(Color.blue.opacity(0.8))
                .foregroundColor(.white)
                .cornerRadius(10)
                
                Button("T√ºm√ºn√º Temizle") {
                    scannedBarcodes.removeAll()
                    UserDefaults.standard.removeObject(forKey: "savedBarcodes")
                }
                .padding(.top, 5)
                .foregroundColor(.red)
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
        .padding()
           
        // MARK: √úr√ºn stok sayfasƒ± g√∂r√ºn√ºm√º
        case "urun-stok":
            VStack(spacing: 12) {
                List {
                    Text("√úr√ºn A - 120 adet")
                    Text("√úr√ºn B - 50 adet")
                    Text("√úr√ºn C - 75 adet")
                    Text("√úr√ºn D - 0 adet (Stokta Yok)")
                    Text("√úr√ºn E - 300 adet")
                }
                .listStyle(.inset)
                .frame(maxHeight: 300)

                Spacer()

                Button("Yeni √úr√ºn Ekle") {
                    configureAlert(
                        title: "Yeni √ºr√ºn eklensin mi?",
                        message: "Yeni bir √ºr√ºn eklemek √ºzeresiniz. Devam etmek istiyor musunuz?",
                        primary: .default(Text("Ekle")) {
                            print("üÜï Yeni √ºr√ºn eklendi")
                        },
                        secondary: .cancel(Text("Vazge√ß"))
                    )
                }
                .padding()
                .background(Color.blue)
                .foregroundColor(.white)
                .cornerRadius(10)
            }
            .frame(maxWidth: .infinity, maxHeight: .infinity)
            .padding()

        default:
            Button("ƒ∞≈üleme Devam Et") {
                configureAlert(
                    title: "Devam edilsin mi?",
                    message: "Bu i≈ülemi yapmak istediƒüinize emin misiniz?",
                    primary: .default(Text("Devam")) { print("‚û°Ô∏è Genel i≈ülem yapƒ±ldƒ±") },
                    secondary: .cancel()
                )
            }
        }
    }

    func configureAlert(title: String, message: String, primary: Alert.Button, secondary: Alert.Button) {
        self.alertTitle = title
        self.alertMessage = message
        self.primaryButton = primary
        self.secondaryButton = secondary
        self.showConfirmation = true
    }
    
    func saveBarcodesToDefaults() {
        UserDefaults.standard.set(scannedBarcodes, forKey: "savedBarcodes")
    }
    
    func loadBarcodesFromDefaults() {
        if let saved = UserDefaults.standard.stringArray(forKey: "savedBarcodes") {
            scannedBarcodes = saved
        }
    }

}

#Preview {
    MainMenuView()
}
